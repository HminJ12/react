리액트 

어렵다
문법 복잡, 파일 관리하기 어렵다

콘솔 인터페이스 ->터미널 cmd 

맥은 설정 방법이 다르다(따로 찾아서 설정해야 한다!)

node js 
자바스크립트 실행기

웹브라우저 안에서만 실행함

웹브라우저 없이 사용하는 것들이 많아짐 
서버 환경, 개발환경 구축 등등

브라우저 없이 자바스크립트 동작하는 거.

cdn 사용하면 메모리 점유율도 높고 번들링이 안 된다.
전부 모듈형태로 사용한다.

모듈, 패키지
npm ->노드에서 패키지를 관리할 수 있는 모듈이다
노드 패키지 모듈

리액트.js
바벨.js    js+xml -> jsx문법
html을 자바스크립트로 만드는 거.
웹팩 번들러 -> 전부 html, js, css로 바꿔주는 것, 하나로 뭉쳐주는 것.

환경설정이 어렵기 때문에 
이 세 가지를 한꺼번에 설치하게 해주는 것이 create-react-app 모듈이 필요하다.

npm i -g create-react-app

i는 install의 약자
install이라고 적어도 된다


create-react-app .
현재폴더에 만들겠다라는 의미


선생님이 주신 reset react 압축 폴더 푼 후,
node_modules 빼고 삭제 후, 붙여넣기


터미널에서 ctrl + c 하면 취소창 나와서 y 입력 후 엔터 
그다음 다시 npm start 입력하기


작업 후 용량이 크기 때문에 node_modules만 두고 
완성 작품을 따로 폴더로 옮긴다.

node.js 설치,
create-react-app . 설치

reset react로 씌우기

모듈이 추가 설치할 때마다 집에서 똑같이 설치해줘야 한다. 


내용 수정은 스크립트에서 수정한다
jxs문법

html처럼 보일 뿐 다시 컴파일링해야 한다.
진짜 html이 아니라고 해서 가짜를 영어로 버츄얼

html 구조 dom
버츄얼 dom이라고 한다.

리액트에서는 
가짜 버츄얼 dom을 진짜로 바꿔서 심어주는 것을 랜더링된다

jsx 문법은 태그가 한개밖에 못 들어간다.

return안에 태그가 하나밖에 못 들어간다.
다 묶어서 태그에 넣어야 한다


{/* 리액트 프래그먼트 */}
->태그 하나로 감싸줘야 하는 것을 리액트 프래그먼트라고 한다.

public
퍼블릭 폴더 안을 찾으려면 절대경로를 써야 한다!
%PUBLIC_URL%

<link rel="stylesheet" href="%PUBLIC_URL%/css/style.css">
나중에 디플로이를 했을 때 문제가 안 생긴다



src폴더는 상대경로로 찾는다.

src은 모듈형태로 동작한다

import './css/style.css';


import를 하면
디플로이 하고나서 요소검사하면 찾기가 힘들다. 디버깅 찾기 힘들다
코드가 지저분해진다.

import는
pwa만들 때는 웹사이트를 앱처럼 만들어서 배포할 때는 반드시 import를 사용해야 한다!
public에 남겨두면 안 된다!!



리액트는 단독태그들은 무조건 닫아줘야 한다.
<img />

리액트에서 변수 사용시 { } 중괄호 사용한다

`` 빽틱 자바스크립트 문자열

<img src={`${process.env.PUBLIC_URL}/img/img1.jpg`} alt="" /> <br />

이렇게 해야 이미지가 안 깨진다



src에서만 가져올 수 있다 import는

src에서만 require


img는 가급적 require를 사용한다
불필요한 것을 삭제하기 때문에


리액트가
index.js를 먼저 찾는다

index.js는
app이라는 애를 root안으로 집어 넣겠다가 하는 일이다

주의사항
들어가는 건 전부 자바스크립트로 들어감
domloadided 상관이 없다!
가상dom 리액트가 만들어서 넣는다

작업은 app.js에서 한다

컴퍼넌트 -> 템플릿

전부 함수형태로 바뀐다

바깥쪽에는 주로 import 한다
코드는 안쪽에서 한다


내가 만든 함수는 
function fn(){

  }
이렇게 주로 쓴다

.map이나 .filter 같은 미리 정해져 있는 함수일 경우에는
() => { }를 주로 사용한다.

 
()=>{fn1();fn2();fn3()} ->함수가 많을 경우



속성을 이용해서 함수를 연결한다
함수 여러개 사용시 콜백을 사용해야 한다

하나일 경우는 함수 이름만 사용한다
onClick={fn}

document.querySelector는 dom이 만들어지고 난 후에 사용할 수 있다.
버츄얼 돔에서는 사용할 수 없다. (가상 엘리먼트이기 때문에)

리액트에서는 class 속성 사용이 안 된다.
객체지향문법에 나오는 스크립트 문법이다

className으로 사용할 수 있다


클릭할 때는 가상돔이 이미 실제 돔으로 변했기 때문에 document.querySelector를 사용할 수 있다.

만들어진 다음에 사용하는 거라서 사용 가능하다


변수와 화면의 관계를 상태라고 한다.

리액트를 만든 목적
-> 변수가 바뀌면 화면이 같이 바뀌어야 한다.
알아서 다 바뀌어야 한다.
이게 상태 관리이다.(state)
하나의 연관된 변수가 바뀌면 다 바뀌어야 한다

let [] = useState() 이걸 치면 import가 된다.

import { useState } from "react";

경로가 안 붙는 건 node_modules 안에 있다는 거다.

react.js이다. js가 생략되어 있다.

함수를 훅스라고 부른다.
리액트만 사용하는 함수를 훅스라고 한다.

let [n , setN] = useState(1) 

useState(1)  초기값

_ 언더바를 붙이면 state와 관련돼 있다고 보면 된다.
본인이 편한대로 알아볼수 있도록 네이밍 룰이다..(꼭 따라할 필요는 없다)


증감연산할 때
_setN((prev)=>{return prev+1})
_setN(prev => prev+1) ->권장방법이다

prev은 클릭하기 전 값
prev+1은 바꾸고 싶은 값

_setN(++_n) ->이렇게 사용하면 안 된다

let n = _n 
_setN(++n)
->일반변수 n을 이용
이거는 나중에 비동기할 때 문제가 생긴다!

state 화면 바꾸는 거

화면이 바뀐 다음에 state가 바뀐다.

------------------------------------
useRef 객체찾는 방식



리액트에서 인라인 스타일 사용 방법
<button style={{display:'none'}}>결과보기</button>


/* eslint-disable */
->warning 안 보이게 하는 거


state 변경은 이벤트 안에서만 사용해야 한다!

too many rerander -> state 잘못 사용해서 나온 오류



_setPoint(prev => prev + 1)

prev 현재값

prev  + 1
다음값에 더하겠다

state 관련된 애들은 함수 안에서 만들어야 한다!

바깥쪽 함수는 반복해서 읽어야 할 내용이 줄어든다.
리랜더링

최적화

state와 관련이 없는 애들은 전부 함수 바깥으로 넘긴다.

보간법 사용시 
오로지 변수나 함수 이름 1개밖에 못 쓴다.
문법은 사용할 수 없다

arr.map이나 arr.filter는 사용가능하다
배열을 return해서 값 하나를 주는 거라서

.indexOf( )도 가능하다,

삼항연산자도 가능하다

return 해주면서 값이 하나만 나올 경우 사용가능하다
 

=============
리액트 조건부 출력

(_showGreen)&&<div className="modal modal-green">5점 만점입니다</div> 
//이항연산자

(조건)? true결과1: false결과2
(조건)&&결과1

------------------------------------
에러창 습관적으로 클리어 해야 한다.

리액트의 특징을 잘 알고 있어야 한다.

state

index.js는 app.js와 index.html을 연결해주는 징검다리 역할이다.

스크립트로 가상돔을 바꾸는 거라 비동기 이벤트 할 필요가 없다.
return 안에서는 하나의 엘리먼트만 리턴한다.
리액트 프래그먼트


변수가 바뀌었을 때 화면이 바뀌는 것을 상태 관리라고 한다.
변수가 바뀌었을 때 연관된 변수와 화면도 바뀌는 것
연쇄 반응 -> state

state 관리 하기 위해 프레임 워크가 나온 거다.

변수를 state로

usestate 


컴퍼넌트 ->function App을 

const []
[ ] 대괄호 -> 구조분해문법

배열이나 객체에서 값을 변수형태로 받아오는 것.
변수를 쓰기 위한 방법이다.


함수를 이용해서 값을 전부 다 바꾸는 것 -> state

const [_num1, _setNum1] = useState(0)
_num1 변수, 호출할 때 쓰고 _setNum1는 state를 바꾸는 함수이다.

0은 초기값이다.

0은 못 나누기 때문에 0/0 = NaN이 나온다.

보간법 {} 중괄호 안에는 최종 결과가 하나만 나와야 한다. (문법 사용 불가)


화면을 바꾼다는 건 컴퍼넌트 내용을 다시 읽는 걸 말한다.

랜더링

무한 루프에 걸리면 오류가 난다.

화면을 바꾸는 거는 특정 이벤트일 때만 사용해야 한다!

state 변경은 특정 이벤트 내에서만 해야 한다, 일회성에서만 사용해야 한다!

state 변경은 이벤트 시에만 사용해야 한다! (주의사항)


return은 이 함수가 끝났다는 뜻이다.
return 밑에는 써도 적용이 안 된다.

속성 onClick={ }을 통해 함수를 넣는다.

onClick={함수이름}

컴포넌트 바깥쪽에서 함수를 만들면 좋다.
퍼포먼스가 짧아서 좋은데 안쪽에서 쓰는 이유는 state 변경할 목적이 있으면 안쪽에서 만들어야 한다.
바깥쪽에서는 state 변경을 할 수 없다!

바깥에서 만든 함수는 state와 상관없구나 생각하면 된다.

애로우펑션은 주로 map과 filter쓸 때 사용한다
본인이 만든 함수는 function( ){ } 이렇게 사용한다.

form, a 새로고침이 일어나는 기능을 막아야 한다.

e.preventDefault()를 해줘야 한다!


다음에 변하게 한다
lazy 초기화

랜더링되고 나서 바뀐다.


================
components

src 안에 폴더를 만든다

첫 글자가 대문자이면 components 이다.

Sum.jsx 
확장자는 jsx 
컴포넌트가 여러개일 때 찾기 쉬워서


나중에 이름이나 폴더 나중에 바꾸면 다 고쳐야 한다.
가급적 파일명 바꾸지 말아라.

rsc, rsf 치고 tab키를 누르면 자동완성된다.

처음에 컴포넌트 설계할 때 생각하고 만들어야 한다.


ctrl + k 누르고 똑같이 뗀 다음에 s 누르기
(협업할 때는 사용하면 안 된다!!)


컴포넌트별로 객체를 찾을 때는 useRef를 사용해야 한다!!

state가 컴포넌트별로 어디서 설정하느냐가 중요하다!!

부모가 만든 걸 자식이 같이 사용할 수 있게 하는 거
 
프롭스를 내려준다, 하사한다
드릴링 -> 판다(아래쪽으로) 부모에서 자식으로 
리프팅 -> 올리는 거, 자식에서 부모로

드릴링
<Sum _setPoint={_setPoint}/>


컴포넌트에서는
const Sum = (props) => { 
props._setPoint(prev => prev + 1)

props를 넣고 
props._setPoint( ) 이렇게 사용한다.

props도 객체이다.


const Sum = ({_setPoint}) => { 
구조분해하고 나서 
_setPoint(prev => prev + 1) 이렇게 사용한다.


복잡한 객체는 무조건 컴포넌트로 만든다.



onInput={}
-> 입력할 때마다, 입력하는 동안


------------------------------------
컴포넌트 반복출력

state 선언의 위치가 중요하다.

반복문 써서 출력해준다.


key 
반복문 안에서 같은 키값을 주면 안 된다.
다 다른 값을 준다.
유니크 값

key 값이 변한 것만 바뀌게 하기 위해서 key를 쓰는 거다.

key에 i를 사용하면 안 된다.
전체 순서 바뀌면서 다 값이 바뀌기 때문에

무조건 id를 만들어줘야 한다.

반복횟수는 변하지만 배열값은 변하지 않는다.

i는 사용하지 말아야 한다!!

new Array(4) //길이가 4인 빈 배열을 만들겠다


배열을 return할 때 key를 사용한다.
------------------------------------
화면에 관련 있는 애들 state

형제끼리는 state를 못 바꾼다.
부모,자식끼리만 state를 바꿀 수 있다.

다시 그려야 한다 -> 배열을 바꿀 수 있어야 한다

직계는 props
손주한테는 context

복제하거나 출력할 때 사용한다 -> state는

------------------------------------
context ->훅스 api

가상 돔에서는 변수 사용하고 싶으면 { }중괄호를 열어야 한다.

jsx안에서 스크립트를 사용하기 위해서 중괄호 사용한다

createContext()


export const AppContext = createContext()
function app 밖에서 만들어야 하고 export를 해야 모두 사용할 수 있다.

AppContext.Provider 범위 설정

value는 창고

리덕스
리액트에서 만든 게 아니다.
프레임워크 두개를 섞어서 사용함

context, useReducer
리코일 (context, useReducer) 최신 기능

복잡한 거는 useReducer 사용해야 한다.

2023년 요즘은 리코일을 배워야 한다.

<AppContext.Provider value={{
      _pointArr,_setPointArr
    }}>
객체로 보내야 한다, 값을 하나밖에 못 보내기 때문에

보낼 때는 소괄호 () 빼고 써야 한다.


key는 바뀌면 갱신이 된다.

key를 이용해서 새로고침을 만든다.


한줄로 이어쓸 때만 세미콜론;으로 사용한다

------------------------------------
Life Cycle
생명주기

랜더링

변수에도 생명 주기가 있다

리랜더링 앱이 업데이트

업데이트될 때 1증가해라
화면 바뀌기 전에 값을 찍는다 (콘솔 로그)

_n이라는 state가 변경이 되면 App안쪽을 리랜더링 한다.

state가 변경되면 랜더링이 일어난다.
안쪽, inside만 일어난다.
outside는 일어나지 않는다.

자식을 먼저 찾는다
(시작했을 때)리랜더링될 때는 부모부터 시작된다.

완성은 자식들부터 된다.

완성이 됐을 때 (업데이트가 끝났을 때) 화면을 볼 수가 있다.

업데이트가 완료가 됐을 때 useEffect(()=>{ })
App의 useEffect가 가장 마지막에 일어난다.

업데이트 시작은 부모가 먼저
완료는 자식 중에 첫째가 먼저 완료됨(부모가 가장 마지막에 일어난다)

useEffect 비동기할 때 중요하다!!
비동기 전까지는 useEffect에 useState를 넣으면 안 된다.

setinterval은 누적된다 ->클리어인터벌을 먼저 한다. 

===========
state 변경시 업데이트시 컴퍼넌트 안쪽만 리렌더링
state의 값은 업데이트 후에 렌더링이 일어남

컴퍼넌트 밖의 코드는 출력여부와 상관없이 초기1회만 실행됨

컴퍼넌트 업데이트 순서
 시작: 부모컴퍼넌트 -> 자식컴퍼넌트 
 완료: 자식컴퍼넌트 -> 부모컴퍼넌트

useEffect (라이프사이클 훅스) 
useEffect(()=>{ 

})
업데이트(state가 변경되는 것)가 될 때마다 실행될 코드


useEffect(()=>{ 

},[ ]) 
def 디펜던시
최초 렌더링이 될 때 실행될 코드(단 1회만 실행됨)
버튼 이벤트리스너, setInterval 사용할 때

업데이트state가 바뀔 때마다

처음의 화면에 등장했을 때


useEffect(()=>{ 
  return (( )=>{ 
     //컴퍼넌트가 사라질 때 실행될 코드
  })
},[ ])



App outside 앱 처음 접속하거나 새로고침할 때

컴퍼넌트가 사라질 때 할 일

    return (()=>{
      clearInterval(intervalID)
    })
  },[])

->cleanUP이라고 한다.

단순 업데이트 될 때는 useState를 빼고 업데이트 된다.
죽였다가 살리면 App 안쪽을 다 읽는다 (다시 화면에 태어났을 때)


------------------------------------
버튼을 클릭했을 때 setInterval

state를 무조건 바꾸는 건 특정 이벤트 안에서만 적어야 한다!

잘못 적으면 무한루프에 빠진다.


타이머를 clearInterval을 하면 안 된다

disabled로 막아야 한다.

원래 html은 disabled만 적는다
react에서는 disabled={true}라고 적는다.

disabled={true}는 버튼을 죽이는 거

처음에 true 값이 됐다가 false가 되어야 한다
0초가 되면 버튼을 살린다.

setInterval 안에서 증가하는 값을 찾을 수 없다.(변하는 값을 찾을 수 없다)
확인이 전혀 안 된다.
사용하는 게 어렵다.
setInterval  안에서 감시할 수 없다.


변하는 값을 실시간으로 확인해준다.
state를 사용하고 있는 애들 호출하고 있는 곳에서만 확인할 수 있다.
App 또는 Output에서 확인할 수 있다.

화면에 값이 변하는 건 state가 변한다는 것

화면이 업데이트 될 때 -> useEffect
화면이 갱신되고나서 나온다(화면이 출력된 값을 찍는다)
랜더링 시작 시점.

값 변하는 걸 확인할 때는 useEffect으로 확인


closer 문제...

같은 중괄호 안에서는 interval 공유할 수 있다.

다른 중괄호에서 사용하는 경우 useRef 이용해서 변수를 만들어줘야 한다.
setInterval에서

useRef를 이용해 공용변수로 만드는 거임
뭔가 찾을 수 있게 사용하는 거

useRef를 만들면 사용할 때 .current를 사용해야 한다!


input 속성에 readOnly

readOnly={false} -> 쓸 수 있다
 나중에 true로 변경


useState랑 useRef는 새로고침할 때나 접속하자마자 일회성으로 한번만 읽는다.(초기화할 때)


반복해서 출력하려면 배열밖에 없다

업데이트라는 건 state가 변경될 때를 말한다.

key를 갖게 되면 전체가 변하지 않게 된다
부분 업데이트 된다

useState는 업데이트 될 때는 안 되고
새로 태어날 때 숨겼다가 보여줬다 할 때, key값이 변할 때

부모가 업데이트 되면 자식도 업데이트된다.

부모가 바뀌어서 자식도 다 바뀌는 것을 최적화가 안 됐다고 한다.
가장 위험하다.
피하려면 컴퍼넌트를 최대한 세세하게 쪼개야 한다.

컴퍼넌트가 되면 독립적인 자식들이다.
컴퍼넌트가 되면 부모의 영향을 어느 정도 벗어날 수 있다.

자식들끼리는 공유가 안 된다

------------------------------------
display none인 상태에서는 transition이 안 된다.

setTimeout을 적용해야 transition이 적용된다.


문법 time

dayArr의 _day번째 ->dayArr[_day]

------------------------------------
D-Day 구하기

지금 이 순간을 실시간으로 구하기

setInteval로 구하기

100분일 때 계산방법
Math.floor(100/60) -> 시간
100%60 -> 분

useState를 사용할 때는 특정 이벤트 안에서만 사용하기!

Month는 index가 0부터 시작해서 출력할 때는 +1을 해줘야 한다.
0이 1월이다.



팝업창 만들기
local Storage 사용해서 기록하기

리액트에서는 window.localStorage로 window를 꼭 붙여야 한다.

expires -> 파기, 기한

------------------------------------
리액트 최적화
memo
목적 : 컴퍼넌트 재랜더링을 방지
적용방식 : 컴퍼넌트와 상관없는(컴포넌트가 물려받지 않은) 부모의 상태값이 변경시 재랜더링을 방지(state 변수)
동영상, 슬라이더, 광고(새로고침 했을 때 문제가 생기는 애들에다가 사용)

useCallBack (highOrder function)
목적 : 컴퍼넌트 재랜더링을 방지
적용방식 : 컴포넌트가 물려받은 부모의 함수의 재선언시 재랜더링을 방지
주의사항 : [ ]대괄호 dependency를 설정, memo와 병행해야만 함
고비용함수에만 사용해야 한다(내용 또는 컴포넌트가 복잡한 것들)

useMemo
목적 : 고비용 함수의 반복 실행을 방지
적용방식 : (state)상태값을 변경해서 새로운 값을 출력하는 함수의 실행을 방지
가공이 된다(state가 변하면 재가공된다)


============최적화에 3가지가 있다.

memo는 중요! 꼭 알아야 한다!!
직접적인 랜더링과 관련되어 있다.(memo는 무조건 써야 한다)

ssr, cls(spa)
서버 사이더 렌더링
페이지 번쩍하면서 새로고침되는 거
사이트를 새로 읽는 거.
페이지 주소가 바뀔 때마다 페이지 새로고침이 일어난다.
이미지, html 문서 데이터를 다시 다운받는다.


클라이언트 사이더 렌더링
뷰나 리액트
페이지가 백개 건 천개 건 한번에 다운 받는다.
html이 하나여서 한번에 다운 받는다.

처음 로딩 속도는 리액트가 느리다, 메모리 부화율이 높다.


업데이트는 언제 일어나냐 -> state가 변경될 때 일어난다.
state를 사용하는 애들만 업데이트가 된다.

부모가 상태값state가 변경되면 나도 업데이트 된다

memo를 다 쓰면 메모리에 부담을 준다.
필요할 때에만 사용해라.

리프팅 자식에서 부모로 사용하는 거

=========
주의사항
리랜더링 막으려면 props를 쓰면 된다.
useContext를 사용하면 리랜더링이 된다.

------------------------------
라우터

페이지를 보여줬다 숨겼다 하는 거
2가지가 있다.
조건부가 있고 라우터를 이용해서 주소를 이용해 특정 컴포넌트를 보여주는 방법이 있다.

커다란 사이즈들은 주로 사용하는 것은 라우터.

Shift + alt + f ->줄 정리
Ctrl + / ->선택 안하고 주석 정리


====================
라우터 설치(집에서도 똑같이 하기)

터미널에서 + 누르기

npm i react-router-dom 쓰기(설치)

cmd 휴지통에 버리기

모듈설치 후 에러 나오면 ctrl+c 눌러서 npm 종료 했다 다시 켜거나 vs code 껐다 켜기 하면 됨(모듈 설치하면 종종 에러 나올 때가 있다)

uninstall하려면
npm uninstall react-router-dom 
(app을 reset해서 충돌방지를 위해 삭제 후 다시 설치한다)

설치 후 package.json에 react-router-dom이 있으면 설치가 제대로 된 거다!
=====================

브라우저 라우터를 감싸줘야 한다.

context를 사용할 때 브라우저 라우터 안에서 만들 수 없다.

App보다 큰 index.js에서 BrowserRouter를 import 해준다!!

context를 사용해야 하기 때문에 index.js에서 라우터를 호출한다.

context 사용 안 할 경우 App.js에서 라우터를 import하면 된다. 


라우터 주소 바꾸는 거
라우츠란 주소가 바뀔 때 컴포넌트가 변하는 부분들의 그룹

라우츠 안에는 라우트가 들어간다.

path란 /이 경로가 붙었을 때

      <Routes>
        <Route path='/' element={<CompHome/>}/>
      </Routes>

/ -> http://localhost:3000/ 이것을 의미한다, 첫페이지


배열을 만들어서 사용 관리해야 함

목록추가할 때마다 배열 추가

프로젝트에 사용할 거임...

 /*  let todoArr = [..._todoArr] //배열을 복사한다
    todoArr.push(obj)
    _setTodoArr(todoArr) 이것보다 더 줄일 수 있다*/

    _setTodoArr([..._todoArr, obj]) 
//새로운 배열로 만들어서 push로 obj를 해서 바꾼다


리액트는 새로고침하면 안 된다

Link가 나중에 a 앵커로 바뀐다.
리액터 라우터에서만 사용 가능

파람즈

------------------------------
value를 default value로 바꾸면 state 수정이 불가능하다

액티브 구현 차이가 있다

객체 안에 있는 index를 찾아내야 하려면 findIndex를 사용해야 한다

리액트에서 구현하는 singlepageApp에서는 className을 같은 이름으로 주면 충돌하지 않는다.
하지만 css 디자인할 때는 똑같이 적용되기 때문에 주의해야 한다!


디카피
셸로우카피 ->(껍질카피)얕은 복사

객체도 스프레드 연산자를 통해 복사가 가능

배열 안에 객체가 있는 경우는 배열을 복사하면 객체는 같은 객체이다.

깊은 복사(디카피)
배열 안에 객체가 있는 경우 배열과 객체를 복사 후 서로 다 다른 경우..

arr=[
{a,b},
{a,b}
]가 있을 경우 깊은 복사 방법은
arr.map((v)=>{
 return {...v}
})
객체를 새로 만들어서 새로운 배열을  만든다(객체, 배열 값 다 다르다)


설치하는 것들을 모듈이라고 한다.
cdn 같은 거

최적화를 위해 쪼갠다.


주소 잘못 입력했을 때
404 페이지가 없을 때 항상 만들어준다.


샘플일정 데이터(dummy)만들기

원래는 localstorage로 가져온다

key는 유일한 값을 줘야 한다(변하면 안 된다) 재랜더링을 막기 위해 사용함
key값은 프롭스로 사용할 수 없다.
id라는 속성값을 다시 내려준다

링크
Link가 있고 NavLink가 있다.
액티브 구현의 차이가 있다

App.js에서 하고 
:id 함수의 파라미터와 유사하다, 집어 넣어라 

가공없이 그대로 사용할 때 전개 연산자



검색버튼 만들기
원본배열은 유지를 해야 한다

검색,정렬은 원본배열을 건드리면 안 된다

화면이 바뀌면 초기화가 된 거다

일단 밖에서 만든다

localStorage 공부해오기!!
------------------------------
리액트도 프로젝트 나간다

todoApp은 파이어베이스로 만들 거다.

출력할 때 목록배열과 원본배열 2개 만들어야 한다

1. components 만든다.
2. 배열 useState()를 만든다.
3. 라우터 
4. context 사용 후 호출

일정목록이 있는지 없는지부터 알아내야 한다.
getItem

배열을 리턴

-------------------------------
리액트 아웃렛

중첩 라우터 Nested Router

웹사이트 만든다고 가정해보자...
src 안에 components 폴더를 만든다
Comp 파일을 만든다.

header, footer를 만든다.
App.js에서 호출한다.
CompMain을 만든다.

Routes 안에 Route가 있다.

html에서는 menu.php 만들듯이 리액트에서는 CompMenu.jsx를 따로 만들어준다.

header 안에 menu를 호출한다.

내용이 달라지는 부분을 리액트에서는 아웃렛이라고 한다.
outlet ->components 안쪽에서 주소에 따라 달라지는 부분을 말한다.

서브페이지 공통 하나를 만들고 내용이 달라지는 것을 outlet으로 만들어서 처리한다.


서브 안에 sidebar를 호출한다.
sidebar  안에는 CompMenu를 호출한다.

Outlet 사용방법 리액트 6.0에서 하는 방법
5.0은 다른 방법이다.

아웃렛은 범위가 있어야 한다.
          <Route path="" element={<CompSubWrap/>}>
            <Route path="" element={<CompGreet/>}/>
          </Route>


리액트로 홈페이지 만들 때
main을 만들고 header, footer 만들고 subWrap을 만들고 이 안에 들어갈 comp를 만들고 링크 타고 가는지 확인.

useLocation

pathname 
1뎁스가 필요하다


-------------------------------
리액트 5월 4일 문제 풀기! 
버튼 누르면 컴포넌트 추가 , 1,2,3,4가 추가 된다
추가될때마다

동일한 컴포넌트가 출력되려면 배열!!
배열 길이가 늘어나면 배열이 늘어난다.

localStorage 저장해서 껐다 켜도 남겨 놓기

1. 빈배열을 만든다


------------------------------
라우터 설치 
npm i react-router-dom

